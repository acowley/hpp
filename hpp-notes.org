* Useful Web Pages
- [[https://gcc.gnu.org/onlinedocs/gcc/Preprocessor-Options.html][GCC Preprocessor Options]]
- [[https://gcc.gnu.org/onlinedocs/cpp/Invocation.html][GCC Preprocessor Invocation]]
- [[https://en.wikipedia.org/wiki/C_preprocessor][C Preprocessor
  Wikipedia]]
* Reflection Without Remorse
If we want to do more elaborate streamed parsing, we can consider a
[[http://okmij.org/ftp/Haskell/zseq.pdf]["Reflection Without Remorse"]] style of a pipes-like streaming
architecture.

To implement the type-aligned sequence, we can unsafely reuse
=Data.Sequence=. Here is a related [[https://github.com/atzeus/reflectionwithoutremorse/blob/master/Data/LiftSequence.hs][example]] of doing just that.

Here is a [[https://github.com/ekmett/machines/issues/68][GitHub issue]] sketching how to port the =machines= library to
a remorseless framework in order to merge the `Plan` and `Machine` types.

* Overall Control Flow

** Free monads in the streets
We expect control to follow from the type

#+BEGIN_SRC haskell
HppT [String] (ParserT IO [String]) [String]
#+END_SRC

The output is a little tricky, actually. I don't want to produce a big list of output; I want to sink it incrementally as it is produced.

One option is to equip ~HppF~ with a ~FlushOutput t r~ variant, and then have the interpreter, ~runHpp~ do the writing.


A catch here is that ~directive~, while ostensibly a ~Parser~ wants to poke at the ~HppState~.

** Bad Ideas
*** Orrrr

 Turning things around completely to have,

 #+BEGIN_SRC haskell
ParserT (HppT [String] IO) [String] [String]
 #+END_SRC

*** Review
 ~HppT~ on the outside appeals to me because then the explicit interpreter drives the whole operation. It also makes some sense that it feeds the parser rather than having the parser's state be informed by the inner monad.
* Running the test suite
** GCC
In the [[file:tests/mcpp-2.7.2/test-c][test-c]] directory,

#+BEGIN_SRC bash
/usr/bin/time -l ../tool/cpp_test CPP "gcc -D__i386__ -D__DARWIN_ONLY_UNIX_CONFORMANCE %s.c -o %s -w" "rm %s" < n_i_.lst
#+END_SRC

** hpp

#+BEGIN_SRC bash
/usr/bin/time -l ../tool/cpp_test HPP "../../../.stack-work/install/x86_64-osx-nix/lts-7.2/8.0.1/bin/hpp -I/usr/include ${GCCDIR} --cpp -D__i386__ -D__DARWIN_ONLY_UNIX_CONFORMANCE %s.c | gcc -o %s -w -x c -" "rm %s" < n_i_.lst
#+END_SRC
